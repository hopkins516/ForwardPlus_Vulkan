#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

vec4 ComputePlane( vec3 p0, vec3 p1, vec3 p2 )
{
    vec4 plane;
 
    vec3 v0 = p1 - p0;
    vec3 v2 = p2 - p0;
 
    plane.xyz = normalize( cross( v0, v2 ) );
 
    // Compute the distance to the origin using p0.
    plane.w = dot( plane.xyz, p0 );
 
    return plane;
}

// Four planes of a view frustum (in view space).
// The planes are:
//  * Left,
//  * Right,
//  * Top,
//  * Bottom.
// The back and/or front planes can be computed from depth values in the 
// light culling compute shader.
struct Frustum
{
    vec4 planes[4];
};


layout(binding = 4) uniform UniformBufferObject {
    mat4 inverseProj;
    vec2 screenDimensions;
} csParams;

layout(binding = 5) buffer FrustumGrid {
    int numFrustums;
    Frustum frustums[];
};

layout (local_size_x = 256, local_size_y = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= numFrustums) {
        return;
    }

    frustums[index].planes[0] = vec4(0,1,0,1);
    frustums[index].planes[1] = vec4(1,0,0,1);
}
