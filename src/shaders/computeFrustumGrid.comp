#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define BLOCK_SIZE 16

struct Light {
	vec4 beginPos; // beginPos.w is intensity
	vec4 endPos; // endPos.w is radius
	vec4 color; // color.w is time
};

struct Frustum {
    vec4 planes[4];
};

layout(binding = 3) buffer Lights {
   Light lights[];
};

layout(binding = 4) uniform Params {
    mat4 inverseProj;
    vec2 screenDimensions;
    ivec2 numThreadGroups;
    ivec2 numThreads;
	int numLights;
	int numFrustums;
	float time;
} params;

layout(binding = 5) buffer Frustums {
    Frustum frustums[];
};

// Convert clip space coordinates to view space
vec4 ClipToView( vec4 clip )
{
    // View space position.
    vec4 view = params.inverseProj * clip ;
    // Perspective projection.
    view = view / view.w;

    return view;
}

// Convert screen space coordinates to view space.
vec4 ScreenToView( vec4 screen )
{
    // Convert to normalized texture coordinates
    vec2 texCoord = screen.xy / params.screenDimensions;

    // Convert to clip space
    vec4 clip = vec4( vec2( texCoord.x, 1.0f - texCoord.y ) * 2.0f - 1.0f, screen.z, screen.w );

    return ClipToView( clip );
}

vec4 ComputePlane( vec3 p0, vec3 p1, vec3 p2 )
{
    vec4 plane;

    vec3 v0 = p1 - p0;
    vec3 v2 = p2 - p0;

    plane.xyz = normalize( cross( v0, v2 ) );

    // Compute the distance to the origin using p0.
    plane.w = dot( plane.xyz, p0 );

    return plane;
}

layout (local_size_x = 16, local_size_y = 16) in;

void main()
{
	if (gl_GlobalInvocationID.x >= params.numThreads.x
	    || gl_GlobalInvocationID.y >= params.numThreads.y) {
		return;
	}

	uint index = gl_GlobalInvocationID.y * uint(params.numThreads.x)
		+ gl_GlobalInvocationID.x;

    vec3 eyePos = vec3( 0, 0, 0 );
    // Compute the 4 corner points on the far clipping plane to use as the
    // frustum vertices.
    vec4 screenSpace[4];
    // Top left point
    screenSpace[0] = vec4( gl_GlobalInvocationID.xy * BLOCK_SIZE, -1.0f, 1.0f );
    // Top right point
    screenSpace[1] = vec4( vec2( gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y ) * BLOCK_SIZE, -1.0f, 1.0f );
    // Bottom left point
    screenSpace[2] = vec4( vec2( gl_GlobalInvocationID.x, gl_GlobalInvocationID.y + 1 ) * BLOCK_SIZE, -1.0f, 1.0f );
    // Bottom right point
    screenSpace[3] = vec4( vec2( gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y + 1 ) * BLOCK_SIZE, -1.0f, 1.0f );


    vec3 viewSpace[4];
    // Now convert the screen space points to view space
    for ( int i = 0; i < 4; i++ )
    {
        viewSpace[i] = ScreenToView( screenSpace[i] ).xyz;
    }

    // Now build the frustum planes from the view space points
    // Left plane
    frustums[index].planes[0] = ComputePlane( eyePos, viewSpace[2], viewSpace[0] );
    // Right plane
    frustums[index].planes[1] = ComputePlane( eyePos, viewSpace[1], viewSpace[3] );
    // Top plane
    frustums[index].planes[2] = ComputePlane( eyePos, viewSpace[0], viewSpace[1] );
    // Bottom plane
    frustums[index].planes[3] = ComputePlane( eyePos, viewSpace[3], viewSpace[2] );

    // Store the computed frustum in global memory (if our thread ID is in bounds of the grid).
    // if ( gl_GlobalInvocationID.x < params.numThreads.x &&
    //      gl_GlobalInvocationID.y < params.numThreads.y )
    // {
    //     uint index = gl_GlobalInvocationID.x +
    //         ( gl_GlobalInvocationID.y * uint(params.numThreads.x) );
	//
    // }
}
