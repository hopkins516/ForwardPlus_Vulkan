#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define BLOCK_SIZE 16
#define MAX_NUM_LIGHTS_PER_TILE 1024
#define PIXELS_PER_TILE 8

struct Light {
	vec4 beginPos; // beginPos.w is intensity
	vec4 endPos; // endPos.w is radius
	vec4 color; // color.w is time
};

struct Frustum {
    vec4 planes[4];
};

layout(binding = 1) uniform sampler2D depthSampler;

layout(binding = 4) uniform Params {
	mat4 viewMat;
    mat4 inverseProj;
    ivec2 screenDimensions;
    ivec2 numThreads;
	int numLights;
	float time;
} params;

layout(binding = 5) buffer Frustums {
    Frustum frustums[];
};

layout(binding = 3) buffer Lights {
   Light lights[];
};

layout(binding = 7) buffer LightIndex {
	int lightIndex[];
};

layout(binding = 8) buffer LightGrid {
	int lightGrid[];
};

// Convert clip space coordinates to view space
vec4 ClipToView( vec4 clip )
{
    // View space position.
    vec4 view = params.inverseProj * clip ;
    // Perspective projection.
    view = view / view.w;

    return view;
}

// Convert screen space coordinates to view space.
vec4 ScreenToView( vec4 screen )
{
    // Convert to normalized texture coordinates
    vec2 texCoord = screen.xy / params.screenDimensions;

    // Convert to clip space
    vec4 clip = vec4( vec2( texCoord.x, 1.0f - texCoord.y ) * 2.0f - 1.0f, screen.z, screen.w );

    return ClipToView( clip );
}

bool SphereInsidePlane(vec3 c, float r, vec3 N, float d) {
	return dot(N, c) - d < -r;
}

bool SphereInsideFrustum(vec3 c, float r, Frustum frustum, float minDepth, float maxDepth) {
	bool result = true;

	if (c.z - r > minDepth || c.z + r < maxDepth) {
		result = false;
	}

	for (int i = 0; i < 4 && result; ++i) {
		if (SphereInsidePlane(c, r, frustum.planes[i].xyz, frustum.planes[i].w)) {
			result = false;
		}
	}

	return result;
}

layout (local_size_x = 16, local_size_y = 16) in;
void main()
{
	if (gl_GlobalInvocationID.x >= params.numThreads.x
	    || gl_GlobalInvocationID.y >= params.numThreads.y) {
		return;
	}

	// tile index
	uint index = gl_GlobalInvocationID.y * uint(params.numThreads.x)
		+ gl_GlobalInvocationID.x;
	uint lightIndexBegin = index * MAX_NUM_LIGHTS_PER_TILE;
	uint numLightsInTile = 0;
	vec2 texcoordUnit = 1. / params.screenDimensions;
	float minDepth = 10000.;
	float maxDepth = 0.;

	for (int i = 0; i < PIXELS_PER_TILE; ++i) {
		for (int j = 0; j < PIXELS_PER_TILE; ++j) {
			vec2 offset = vec2(i, j);
			vec2 texcoord = (gl_GlobalInvocationID.xy * PIXELS_PER_TILE + offset) * texcoordUnit;
			float depth = texture(depthSampler, texcoord).x;
			vec4 screenDepth = vec4(texcoord, depth, 1.);
			float viewDepth = ScreenToView(screenDepth).z;

			minDepth = min(minDepth, viewDepth);
			maxDepth = max(maxDepth, viewDepth);
		}
	}

	minDepth = min(minDepth, maxDepth);
	// lights[index].color = vec4(minDepth, maxDepth, 0., 0.);

	for (int i = 0; i < params.numLights; ++i) {
		float t = sin(params.time * i * .005f);
		vec3 beginPos = lights[i].beginPos.xyz;
		vec3 endPos = lights[i].endPos.xyz;
		vec4 pos = params.viewMat * vec4((1 - t) * beginPos + t * endPos, 1.f);

		float radius = lights[i].endPos.w;

		if (SphereInsideFrustum(pos.xyz, radius, frustums[index], minDepth, maxDepth)) {
			lightIndex[lightIndexBegin + numLightsInTile] = i;
			numLightsInTile += 1;
			if(numLightsInTile >= MAX_NUM_LIGHTS_PER_TILE)
				break;
		}
	}

	lightGrid[index] = int(numLightsInTile);
}
