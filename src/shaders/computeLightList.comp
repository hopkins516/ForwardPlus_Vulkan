#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define BLOCK_SIZE 16
#define MAX_NUM_LIGHTS_PER_TILE 1024

struct Light {
	vec4 beginPos; // beginPos.w is intensity
	vec4 endPos; // endPos.w is radius
	vec4 color; // color.w is time
};

struct Frustum {
    vec4 planes[4];
};

layout(binding = 4) uniform Params {
	mat4 viewMat;
    mat4 inverseProj;
    ivec2 screenDimensions;
    ivec2 numThreads;
	int numLights;
	float time;
} params;

layout(binding = 5) buffer Frustums {
    Frustum frustums[];
};

layout(binding = 3) buffer Lights {
   Light lights[];
};

layout(binding = 7) buffer LightIndex {
	int lightIndex[];
};

layout(binding = 8) buffer LightGrid {
	int lightGrid[];
};

bool SphereInsidePlane(vec3 c, float r, vec3 N, float d) {
	return dot(N, c) - d < -r;
}

bool SphereInsideFrustum(vec3 c, float r, Frustum frustum) {
	bool result = true;

	for (int i = 0; i < 4 && result; ++i) {
		if (SphereInsidePlane(c, r, frustum.planes[i].xyz, frustum.planes[i].w)) {
			result = false;
		}
	}

	return result;
}

layout (local_size_x = 16, local_size_y = 16) in;
void main()
{
	if (gl_GlobalInvocationID.x >= params.numThreads.x
	    || gl_GlobalInvocationID.y >= params.numThreads.y) {
		return;
	}

	// tile index
	uint index = gl_GlobalInvocationID.y * uint(params.numThreads.x)
		+ gl_GlobalInvocationID.x;
	uint lightIndexBegin = index * MAX_NUM_LIGHTS_PER_TILE;
	uint numLightsInTile = 0;

	for (int i = 0; i < params.numLights; ++i) {
		float t = sin(params.time * i * .005f);
		vec3 beginPos = lights[i].beginPos.xyz;
		vec3 endPos = lights[i].endPos.xyz;
		vec4 pos = params.viewMat * vec4((1 - t) * beginPos + t * endPos, 1.f);

		float radius = lights[i].endPos.w;

		if (SphereInsideFrustum(pos.xyz, radius, frustums[index])) {
			lightIndex[lightIndexBegin + numLightsInTile] = i;
			numLightsInTile += 1;
			if(numLightsInTile >= MAX_NUM_LIGHTS_PER_TILE)
				break;
		}
	}

	lightGrid[index] = int(numLightsInTile);
}
